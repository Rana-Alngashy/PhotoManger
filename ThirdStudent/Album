public class Album {
    private String name;
    private String condition;
    private PhotoManager manager;
    private int NbComps;

    // Constructor
    public Album(String name, String condition, PhotoManager manager) {
        this.name = name;
        this.condition = condition;
        this.manager = manager;
        NbComps = 0;
    }

    public String getName() {
        return name;
    }

    public String getCondition() {
        return condition;
    }

    public PhotoManager getManager() {
        return manager;
    }

    public LinkedList<Photo> getPhotos() {
        LinkedList<Photo> filteredPhotos = new LinkedList<Photo>();
        LinkedList<Photo> allPhotos = manager.getPhotos();

        if (!allPhotos.empty()) {
            allPhotos.findFirst();
            while (!allPhotos.last()) {
                Photo p = allPhotos.retrieve();
                filteredPhotos.insert(new Photo(p.getPath(), p.getTags()));
                allPhotos.findNext();
            }

            Photo lastPhoto = allPhotos.retrieve();
            filteredPhotos.insert(new Photo(lastPhoto.getPath(), lastPhoto.getTags()));
        }

        NbComps = 0;

        if (!condition.isEmpty()) {
            String[] requiredTags = condition.split(" AND ");

            filteredPhotos.findFirst();
            while (!filteredPhotos.last()) {
                Photo currentPhoto = filteredPhotos.retrieve();
                if (!areTagsAvailable(currentPhoto.allTags, requiredTags)) {
                    filteredPhotos.remove();
                } else {
                    filteredPhotos.findNext();
                }
            }

            Photo lastPhoto = filteredPhotos.retrieve();
            if (!areTagsAvailable(lastPhoto.allTags, requiredTags)) {
                filteredPhotos.remove();
            } else {
                filteredPhotos.findNext();
            }
        }

        return filteredPhotos;
    }

    public int getNbComps() {
        return NbComps;
    }

    private boolean areTagsAvailable(LinkedList<String> allTags, String[] requiredTags) {
        if (allTags.empty()) return false;

        for (int i = 0; i < requiredTags.length; i++) {
            boolean tagFound = false;

            allTags.findFirst();
            while (!allTags.last()) {
                NbComps++;
                if (allTags.retrieve().equalsIgnoreCase(requiredTags[i])) {
                    tagFound = true;
                    break;
                }
                allTags.findNext();
            }

            if (!tagFound) {
                NbComps++;
                if (allTags.retrieve().equalsIgnoreCase(requiredTags[i])) {
                    tagFound = true;
                }
            }

            if (!tagFound) {
                return false;
            }
        }

        return true;
    }
}
