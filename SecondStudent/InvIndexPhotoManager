
package Album;

public class InvIndexPhotoManager {
    private BST<LinkedList<Photo>> invertedIndex;

    // Constructor
    public InvIndexPhotoManager() {
        invertedIndex = new BST<LinkedList<Photo>>();
    }

    // Add a photo
    public void addPhoto(Photo p) {
        LinkedList<String> tags = p.getTags();
        if (tags.empty()) return;

        tags.findFirst();
        while (true) {
            String tag = tags.retrieve();
            if (invertedIndex.findkey(tag)) {
                LinkedList<Photo> photosList = invertedIndex.retrieve();
                photosList.insert(p);
                invertedIndex.update(tag, photosList);
            } else {
                LinkedList<Photo> newList = new LinkedList<Photo>();
                newList.insert(p);
                invertedIndex.insert(tag, newList);
            }
            if (tags.last()) break;
            tags.findNext();
        }
    }

    // Delete a photo
    public void deletePhoto(String path) {
        String allTags = invertedIndex.inOrder();
        if (allTags.isEmpty()) return;

        String[] tags = allTags.split(" AND ");
        for (String tag : tags) {
            if (invertedIndex.findkey(tag)) {
                LinkedList<Photo> photosList = invertedIndex.retrieve();
                boolean found = false;

                if (!photosList.empty()) {
                    photosList.findFirst();
                    while (true) {
                        if (photosList.retrieve().getPath().equalsIgnoreCase(path)) {
                            photosList.remove();
                            found = true;
                            break;
                        }
                        if (photosList.last()) break;
                        photosList.findNext();
                    }
                }

                // Update or remove the tag from the index
                if (photosList.getSize() == 0) {
                    invertedIndex.removeKey(tag);
                } else if (found) {
                    invertedIndex.update(tag, photosList);
                }
            }
        }
    }

    // Return the inverted index of all managed photos
    public BST<LinkedList<Photo>> getPhoto() {
        return invertedIndex;
    }

    BST<LinkedList<Photo>> getPhotos() {
        throw new UnsupportedOperationException("Not supported yet.");  }
}
