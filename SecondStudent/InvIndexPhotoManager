public class InvIndexPhotoManager {

    BST<LinkedList<Photo>> Inverted_Index;

    // Constructor
    public InvIndexPhotoManager() {
        Inverted_Index = new BST<LinkedList<Photo>>();
    }

    // Add a photo
    public void addPhoto(Photo p) {
        LinkedList<String> tags = p.getTags();
        if (!tags.empty()) {
            tags.findFirst();
            do {
                String tag = tags.retrieve();
                LinkedList<Photo> photos_inverted;

                if (Inverted_Index.findkey(tag)) {
                    photos_inverted = Inverted_Index.retrieve();
                } else {
                    photos_inverted = new LinkedList<Photo>();
                }

                photos_inverted.insert(p);
                Inverted_Index.update(tag, photos_inverted);

                tags.findNext();
            } while (!tags.last());
        }
    }

    // Delete a photo
    public void deletePhoto(String path) {
        String AllTags = Inverted_Index.inOrder();
        String[] tags = AllTags.split(" AND ");

        for (String tag : tags) {
            if (Inverted_Index.findkey(tag)) {
                LinkedList<Photo> photos_inverted = Inverted_Index.retrieve();
                photos_inverted.findFirst();

                boolean found = false;
                while (!found && !photos_inverted.last()) {
                    if (photos_inverted.retrieve().getPath().equalsIgnoreCase(path)) {
                        photos_inverted.remove();
                        found = true;
                    } else {
                        photos_inverted.findNext();
                    }
                }

                if (!found && photos_inverted.retrieve().getPath().equalsIgnoreCase(path)) {
                    photos_inverted.remove();
                }

                if (photos_inverted.getSize() == 0) {
                    Inverted_Index.removeKey(tag);
                } else {
                    Inverted_Index.update(tag, photos_inverted);
                }
            }
        }
    }

    // Return the inverted index of all managed photos
    public BST<LinkedList<Photo>> getPhotos() {
        return Inverted_Index;
    }
}
